{"version":3,"file":"static/js/509.e1761951.chunk.js","mappings":"qPAEaA,EAAeC,EAAAA,EAAAA,GAAH,2CAIZC,EAAOD,EAAAA,EAAAA,GAAH,2CAIJE,EAAaF,EAAAA,EAAAA,GAAH,4GAOVG,EAAOH,EAAAA,EAAAA,EAAH,8F,SCkBjB,EA9BgB,WACd,OAA8BI,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0CF,EAAAA,EAAAA,UAAS,GAAnD,eAAOG,EAAP,KAAsBC,EAAtB,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WACRH,GAAa,IACbI,EAAAA,EAAAA,IAAgBH,GAASI,MAAK,SAAAC,GAC5BN,GAAa,GACbJ,EACEU,EAAKC,KAAI,SAAAC,GAAI,OACX,UAACjB,EAAD,YACE,UAACC,EAAD,sBAAqBgB,EAAKC,WAC1B,SAAChB,EAAD,UAAOe,EAAKE,YAFHF,EAAKG,GADL,KAOfb,EAAiBQ,EAAKM,OACvB,GACF,GAAE,CAACX,KAGF,iCACE,SAACZ,EAAD,uBACA,wBAAuB,IAAlBQ,GAAuBE,EAAYJ,EAAU,iBAGvD,C,+LC/BM,SAAekB,IAAtB,4CAAO,OAAP,oBAAO,6GAEoBC,EAAAA,EAAAA,IAAA,4FAFpB,cAEGC,EAFH,yBAKIA,EAAST,KAAKU,SALlB,gCAOHC,QAAQC,MAAR,MAPG,gFAWA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,kGAAkCC,EAAlC,EAAkCA,MAAOC,EAAzC,EAAyCA,KAAzC,kBAIOP,EAAAA,EAAAA,IAAA,kHACmGM,EADnG,iBACiHC,EADjH,yBAJP,uBAGOL,EAHP,EAGDV,KAAQU,QAHP,kBAOIA,EAAQT,KAAI,kBAAkC,CACnDI,GADiB,EAAGA,GAEpBW,MAFiB,EAAOA,MAGxBC,aAHiB,EAAcA,aAAd,KAPhB,gCAaHN,QAAQC,MAAR,MAbG,gFAiBA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA4BvB,GAA5B,8GAEoBa,EAAAA,EAAAA,IAAA,6CACiBb,EADjB,6DAFpB,uBAEKK,EAFL,EAEKA,KAGAgB,EACNhB,EADMgB,MAAOG,EACbnB,EADamB,SAAUC,EACvBpB,EADuBoB,YAAaC,EACpCrB,EADoCqB,aAAcC,EAClDtB,EADkDsB,OAAQL,EAC1DjB,EAD0DiB,aALzD,kBAOI,CACLI,aAAAA,EACAL,MAAAA,EACAC,aAAAA,EACAE,SAAAA,EACAC,YAAAA,EACAE,OAAAA,IAbC,gCAgBHX,QAAQC,MAAR,MAhBG,gFAoBA,SAAeW,EAAtB,+CAAO,OAAP,oBAAO,WAA4B5B,GAA5B,kGAEoBa,EAAAA,EAAAA,IAAA,6CACiBb,EADjB,qEAFpB,uBAEKK,EAFL,EAEKA,KAFL,kBAKIA,EAAKwB,KAAKvB,KAAI,kBAAiD,CACpEwB,KADmB,EAAGA,KAEtBC,aAFmB,EAASA,aAG5BC,UAHmB,EAAuBA,UAI1CC,QAJmB,EAAkCA,QAAlC,KALlB,gCAYHjB,QAAQC,MAAR,MAZG,gFAgBA,SAAed,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,kGAEoBa,EAAAA,EAAAA,IAAA,6CACiBb,EADjB,4EAFpB,uBAEKK,EAFL,EAEKA,KAFL,kBAKIA,EAAKU,QAAQT,KAAI,kBAA8B,CACpDE,OADsB,EAAGA,OAEzBC,QAFsB,EAAWA,QAGjCC,GAHsB,EAAoBA,GAApB,KALrB,gCAWHM,QAAQC,MAAR,MAXG,gF","sources":["components/MovieInfo/Reviews/Reviews.styled.jsx","components/MovieInfo/Reviews/Reviews.jsx","services/movieAPI.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const TitleSection = styled.h2`\n  margin: 20px 0;\n`;\n\nexport const Item = styled.li`\n  margin: 20px 0;\n`;\n\nexport const AuthorName = styled.h3`\n  margin-bottom: 20px;\n  font-size: 20px;\n  font-weight: 800;\n  color: #505050;\n`;\n\nexport const Text = styled.p`\n  line-height: 1.35;\n  letter-spacing: 0.01em;\n  font-weight: 600;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getMovieReviews } from 'services/movieAPI';\nimport { TitleSection, Item, AuthorName, Text } from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState('');\n  const [reviewsLength, setReviewsLength] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    getMovieReviews(movieId).then(data => {\n      setIsLoading(false);\n      setReviews(\n        data.map(elem => (\n          <Item key={elem.id}>\n            <AuthorName>Author: {elem.author}</AuthorName>\n            <Text>{elem.content}</Text>\n          </Item>\n        ))\n      );\n      setReviewsLength(data.length);\n    });\n  }, [movieId]);\n\n  return (\n    <>\n      <TitleSection>Reviews</TitleSection>\n      <ul>{reviewsLength !== 0 || isLoading ? reviews : 'No reviews'}</ul>\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nexport async function getMoviesTrending() {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=63f559983b2c566f4ead7a47a8a9015b`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMoviesByQuery({ query, page }) {\n  try {\n    const {\n      data: { results },\n    } = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=63f559983b2c566f4ead7a47a8a9015b&language=en-US&query=${query}&page=${page}&include_adult=false`\n    );\n    return results.map(({ id, title, release_date }) => ({\n      id,\n      title,\n      release_date,\n    }));\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMovieById(movieId) {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=63f559983b2c566f4ead7a47a8a9015b&language=en-US`\n    );\n    const { title, overview, poster_path, vote_average, genres, release_date } =\n      data;\n    return {\n      vote_average,\n      title,\n      release_date,\n      overview,\n      poster_path,\n      genres,\n    };\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMovieCast(movieId) {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=63f559983b2c566f4ead7a47a8a9015b&language=en-US`\n    );\n    return data.cast.map(({ name, profile_path, character, cast_id }) => ({\n      name,\n      profile_path,\n      character,\n      cast_id,\n    }));\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMovieReviews(movieId) {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=63f559983b2c566f4ead7a47a8a9015b&language=en-US&page=1`\n    );\n    return data.results.map(({ author, content, id }) => ({\n      author,\n      content,\n      id,\n    }));\n  } catch (error) {\n    console.error(error);\n  }\n}\n"],"names":["TitleSection","styled","Item","AuthorName","Text","useState","reviews","setReviews","reviewsLength","setReviewsLength","isLoading","setIsLoading","movieId","useParams","useEffect","getMovieReviews","then","data","map","elem","author","content","id","length","getMoviesTrending","axios","response","results","console","error","getMoviesByQuery","query","page","title","release_date","getMovieById","overview","poster_path","vote_average","genres","getMovieCast","cast","name","profile_path","character","cast_id"],"sourceRoot":""}